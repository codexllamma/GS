generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      =  env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  name            String?
  password        String?
  email           String?  @unique
  emailVerified   DateTime?
  phoneNumber     String?  @unique
  phoneVerified   Boolean  @default(false)
  image           String?
  authProvider    String?  // 'google', 'github', 'phone', etc.
  isAdmin         Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  addresses       Address[]
  accounts        Account[]
  carts           Cart[]
  orders          Order[]
  sessions        Session[]

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  email      String
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}


model Address {
  id        String   @id @default(cuid())
  userId    String
  line1     String
  line2     String?
  city      String
  state     String
  postal    String
  country   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]
}

model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  fabrics Fabric[]
}

model Fabric {
  id         String    @id @default(cuid())
  name       String
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id])
  products   Product[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  fabricId    String
  color       String
  basePrice   Int
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())

  fabric     Fabric           @relation(fields: [fabricId], references: [id])
  variants   ProductVariant[]
  images     ProductImage[]
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@index([fabricId])
}

model ProductVariant {
  id        String      @id @default(cuid())
  productId String
  size      String
  price     Int?
  stock     Int         @default(0)
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  CartItem  CartItem[]
  OrderItem OrderItem[]

  @@unique([productId, size])
}


model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  isPrimary Boolean @default(false)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  variantId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())

  cart      Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  Product   Product?       @relation(fields: [productId], references: [id])
  productId String?
}

model Order {
  id             String        @id @default(uuid())
  userId         String
  addressId      String
  subtotal       Float
  deliveryCharge Float
  total          Float
  createdAt      DateTime      @default(now())
  status         Status        @default(PENDING)
  paymentMethod  PaymentMethod
  isPaid         Boolean       @default(false)

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  address    Address     @relation(fields: [addressId], references: [id])
  orderItems OrderItem[]
}

model OrderItem {
  id              String   @id @default(cuid())
  orderId         String
  variantId       String
  quantity        Int
  priceAtPurchase Float
  createdAt       DateTime @default(now())
  product         Product  @relation(fields: [productId], references: [id])

  order     Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  productId String
}

enum PaymentMethod {
  COD
  RAZORPAY
}

enum Status {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
