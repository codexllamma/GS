generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(cuid())
  email      String      @unique
  password   String
  name       String?
  isAdmin    Boolean     @default(false)
  createdAt  DateTime    @default(now())
  address    String?
  accounts   Account[]
  cartOrders CartOrder[]
  orders     Order[]
  session    Session[]
}

model Order {
  id             String        @id @default(uuid())
  userId         String
  subtotal       Float
  deliveryCharge Float
  total          Float
  createdAt      DateTime      @default(now())
  address        String
  status         Status
  paymentMethod  PaymentMethod
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems     OrderItem[]
}

model OrderItem {
  id              String   @id @default(cuid())
  orderId         String
  productId       String
  quantity        Int
  priceAtPurchase Float
  createdAt       DateTime @default(now())
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product  @relation(fields: [productId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Int
  image       String
  category    Category?
  stock       Int
  createdAt   DateTime    @default(now())
  cartOrders  CartOrder[]
  orderItems  OrderItem[]
  isDeleted   Boolean     @default(false)
}

model CartOrder {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum PaymentMethod {
  COD
  RAZORPAY
  STRIPE
}

enum Category{
  HOODIE
  TRACKS
  JEANS
  TSHIRTS
  SHIRTS
  TROUSERS
}

enum Status {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
