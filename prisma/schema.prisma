// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())     // Primary key, auto-generated unique string ID
  email      String   @unique                 // Email must be unique in DB
  password   String                           // Hashed password
  name       String?                          // Optional (nullable) name
  isAdmin    Boolean  @default(false)         // Admin flag
  orders     Order[]  
  cartOrders CartOrder[]                        // One-to-many relation: 1 User â†’ Many Orders
  createdAt  DateTime @default(now())         // Timestamp of creation
  address     String?
  accounts   Account[]
  session    Session[]
  
}

enum PaymentMethod{
  COD 
  RAZORPAY
  STRIPE
}

enum Status{
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id             String   @id @default(uuid())
  userId         String
  orderItems     OrderItem[]
  subtotal       Float 
  deliveryCharge Float
  total          Float
  createdAt      DateTime @default(now())
  address        String 
  paymentMethod  PaymentMethod
  status         Status
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id              String   @id @default(cuid())
  orderId         String
  productId       String
  quantity        Int
  priceAtPurchase Float
  createdAt       DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Int
  image       String   // URL or path
  category    String
  stock       Int
  createdAt   DateTime @default(now())
  cartOrders  CartOrder[]
  orderItems  OrderItem[]
}

model CartOrder {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  product   Product  @relation(fields: [productId], references: [id])
  productId String

  quantity  Int      @default(1)

  createdAt DateTime @default(now())
}

